<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.used.example.mapper.UserMapper">

	<insert id= "createUser" parameterType= "com.used.example.domain.User">
		insert into user(
			u_name,
			u_password,
			u_phone,
			u_username,
			u_address,
			u_isAccountNonLocked,
			u_isAccountNonExpired,
			u_isCredentialsNonExpired,
			u_isEnabled
		) values(
			#{name},
			#{password},
			#{phone},
			#{username},
			#{address},
			#{isAccountNonLocked},
			#{isAccountNonExpired},
			#{isCredentialsNonExpired},
			#{isEnabled}

		)
	
	</insert>
	
	<insert id= "createAuthority"  parameterType= "com.used.example.domain.User">
		insert into auth(
			u_username,
			u_auth
		
		) values
				<foreach item="authority" index="index" collection="authorities" separator=",">
						(#{username}, #{authority.role})
				</foreach>
				
				ON DUPLICATE KEY
							UPDATE
								u_username = #{username}
	</insert>
	
	<select id= "readAuthorities" parameterType= "String" resultType= "org.springframework.security.core.authority.SimpleGrantedAuthority">
		select u_auth
		from auth
		where u_username= #{username}
	</select>
	
	<select id="readUser" parameterType= "String" resultType= "com.used.example.domain.User">
	
		select  u_username				as		username,
				u_password				as		password,
				u_phone					as		phone,
				u_name					as		name,
				u_isAccountNonLocked	as		isAccountNonLocked,
				u_isAccountNonExpired   as      isAccountNonExpired,
				u_isCredentialsNonExpired as	isCredentialsNonExpired,
				u_isEnabled             as      isEnabled
		from	user
		where	u_username = #{username}	
	</select>
	
	<select id= "readUser_token" parameterType="String" resultType="com.used.example.domain.UserInfo">
		select  u_username				as		username,
				u_phone					as		phone,
				u_name					as		name,
				u_address               as      address,
				u_num           		as		u_num,
				u_password				as 		password
		from    user
		where   u_username = #{username}		
	</select>
	
	<select id= "readAuthorities_token" parameterType= "String" resultType="com.used.example.domain.UserInfo">
		select  u_auth					as		auth 
		from 	auth
		where	u_username= #{username}
	
	
	</select>
	
	<update id="UserEdit" parameterType="com.used.example.domain.User">
		update user a inner join auth b
		on a.u_username= b.u_username
		set		a.u_username = #{username},
				a.u_password = #{password},
				a.u_phone = #{phone},
				a.u_address = #{address},
				a.u_name =#{name},
				b.u_username= #{username}
		where   a.u_num = #{u_num}
		
	</update>
	


	
	<delete id= "UserDelete" parameterType="String">
		DELETE a,b
		FROM user a
		INNER JOIN auth b ON a.u_username= b.u_username
		WHERE a.u_username= #{username}
		
		
	</delete>



</mapper>
