   


1) index.js

 ProductOK({commit}, payload){
      if(payload !== null){
        console.log(payload)
        let token = localStorage.getItem("access_token")
        let config={
          headers: {
            "access_token": token
          }
        }
        axios
        .post('http://localhost:9200/api/product' , payload, config)
        .then(wres=>{
         
            commit('WritingSuccess' , wres.data)
            console.log(wres.data)        
        })
        .catch(()=>{
          commit('WritingFaile')
        })

      }

    },


2)Writing



<template>
    <v-app>
        <v-container class="pa-5">
            <div v-show="WritingError === true">
                <h1 class="red--text" style="font-size: 15px;">
                    입력하신걸 확인해 주세요!
                </h1>
            </div>
            <v-row justify="start">
                <v-col 
                cols="5"
                sm="6"
                class="d-flex"
                >
                    <v-select
                        v-model="industry"
                        :items="industries"
                        single-line
                        dense
                    ></v-select>
                </v-col>
                <v-col
                cols="5"
                sm="6"
                class="d-flex"
            
                >
                    <v-select
                        v-model="kind"
                        :items="kinds"
                        single-line
                        dense
                    ></v-select>
                </v-col>
            </v-row>
            <v-row>
                <v-col
                class="py-0"
                
                cols="3">
                    <h1 style="font-size: 15px">제목</h1>
                
                </v-col>
                <v-col
                cols="9"
                 class="py-0"
                >
                    <v-text-field
                    v-model="title"
                    outlined
                    rows="1"
                    dense
                    ></v-text-field>
                </v-col>
            </v-row>
            <v-row>
                <v-col
                cols="3"
                class="py-0" 
                >
                    <h1 style="font-size: 15px">내용</h1>
                </v-col>
                <v-col
                cols="9"
                class="py-0" 
                >           
                    <v-textarea
                    v-model="content"
                    outlined
                    rows="2"
                        
                    >
                    </v-textarea>
                </v-col>          
            </v-row> 

            <v-row >
                <v-col
                cols="3"
                class="py-0" 
                >
                    <h1 style="font-size: 15px">브랜드</h1>               
                </v-col>
                <v-col
                cols="9"
                class="py-0" 
                >
                    <v-text-field
                    v-model="brand"
                    outlined
                    rows="1"
                    dense
                    height="2"
                    ></v-text-field>
                </v-col>
            </v-row>
            <v-row>
                <v-col
                cols="3"
                class="py-0" 
                >
                    <h1 style="font-size: 15px">연식</h1>
                </v-col>
                <v-col
                cols="5"
                class="py-0"  
                >
                    <v-select       
                    :items="yearOptions"
                    single-line
                    dense
                    class="mt-0"
                    v-model="year"
                    ></v-select>
                </v-col>          
            </v-row>
            <v-row >
                <v-col
                cols="3"
                class="py-0" 
                >
                    <h1 style="font-size: 15px">시작가격</h1>               
                </v-col>
                <v-col
                cols="9"
                class="py-0"
                >
                    <v-text-field
                    v-model="startprice"
                    outlined
                    rows="1"
                    dense
                    height="2"
                    ></v-text-field>
                </v-col>
            </v-row>
             <v-btn  
            class="primary mt-5"
            block
            router :to="{name: 'Picture'}"
            @click="ProductOK({
                title,
                content,
                industry,
                kind ,
                brand,
                year,
                startprice
            })"
            >다음</v-btn>
            <v-virtual-scroll
            height="100"
            item-height="20"
            ></v-virtual-scroll>     
        </v-container>
    </v-app>


</template>

<script>
import { mapActions, mapState } from 'vuex';
import _ from 'lodash';

export default{
    data() {
        
        return {

            industry: null,
            kind: null,
            title: null,
            content: null,
            brand: null,
            year: null,
            startprice: null,
            username: null,
            file: null,
            showImage:[],
            files:[],

/////////////////////////////////////////////////////보내야 할것들

            yearOptions:[], 
            select: null,
            kind: null,
            industry: null,
            industries: [
                '한식', 
                '찜/탕',
                '면요리',
                '고기/구이',
                '족발/ 보쌈',
                '치킨',
                '분식',
                '중식',
                '동남아식',
                '회/초밥',
                '일식/돈까스',
                '피자/샐러드',
                '호프/술집',
                '카페/베이커리',
                '배달전문점'

            ],

            kinds: [
                '작업대',
                '커피머신',
                '그릴기',
                '냉동 절육기',
                '제빙기',
                '오븐기',
                '튀김기',
                '기름 정제기',
                '씽크대',
                '소독기',
                '가스렌지',
                '냉장고/쇼케이스',
                '보온통',
                '에어컨',
                '회전국솥',
                '절단기',
                '벽선단',
                '기타'
            ],
//////////////////////////////////////////////////////////////////제품 선택 내생각엔 따로 빼는것도 좋은 방법인듯
        

        }

    },
    mounted() {
        // 연도 선택 옵션 리스트 설정
        let year = new Date().getFullYear();
        for (let i = 1970; i <= year; i++) {
        this.yearOptions.push(i);        
        }
    },
///////////////////////////////////////////////////////////연도 선택
    methods: {
    
        ...mapActions(['ProductOK'])
    },
    computed: {
        ...mapState(['userInfo','ImageList', 'WritingError'])
    },
    created(){
        this.username= this.userInfo.username
      
    }
    
    

}

</script>




3)


	@PostMapping//제품 저장
	public ResponseEntity<?> Product (@RequestBody Product product, HttpServletRequest request) throws Exception {
		token= request.getHeader("access_token");
		
		if(StringUtils.hasText(token)&& token.startsWith("Bearer")) {
			token=token.substring(7, token.length());
		}
		String username= JwtUtils.getUserEmailFromToken(token);
		
		product.setUsername(username);
		product.setSale("false");
		productService.createProduct(product);		
		int p_num = product.getP_num();
		
		return  new ResponseEntity<>(p_num , HttpStatus.OK);
		
	}
	

